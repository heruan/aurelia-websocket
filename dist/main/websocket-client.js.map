{"version":3,"sources":["../../src/main/websocket-client.ts"],"names":[],"mappings":"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","file":"websocket-client.js","sourcesContent":["import { autoinject } from \"aurelia-dependency-injection\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { HttpClient } from \"aurelia-http-client\";\nimport { JsonEncoder, JsonDecoder } from \"aurelia-json\";\nimport { Message } from \"./message\";\nimport { JoinMessage } from \"./join-message\";\nimport { LeaveMessage } from \"./leave-message\";\n\n@autoinject\nexport class WebsocketClient {\n\n    public static USERS_EVENT: string = \"endpoint-users\";\n\n    public static CONNECTED_EVENT: string = \"endpoint-connected\";\n\n    public static DISCONNECTED_EVENT: string = \"endpoint-disconnected\";\n\n    public users: Set<Object> = new Set<Object>();\n\n    private eventAggregator: EventAggregator;\n\n    private httpClient: HttpClient;\n\n    private jsonDecoder: JsonDecoder;\n\n    private endpoint: WebSocket;\n\n    private connected: boolean = false;\n\n    private entityMap: Map<string, Object>;\n\n    private revertMap: Map<Object, Object>;\n\n    public constructor(httpClient: HttpClient, jsonDecoder: JsonDecoder) {\n        this.eventAggregator = new EventAggregator();\n        this.httpClient = httpClient;\n        this.jsonDecoder = jsonDecoder;\n        this.on(JoinMessage.EVENT, user => {\n            console.log(\"Connected: \" + user.name);\n            this.users.add(user);\n        });\n        this.on(LeaveMessage.EVENT, user => {\n            console.log(\"Disconnected: \" + user.name);\n            this.users.delete(user);\n        });\n    }\n\n    public getUsers(): Set<Object> {\n        return this.users;\n    }\n\n    public setUsers(users: Set<Object>) {\n        this.users = users;\n    }\n\n    public on(event: string, callback: Function) {\n        this.eventAggregator.subscribe(event, callback);\n    }\n\n    public connect(url: string, protocols?: string|string[]): Promise<WebsocketClient> {\n        return new Promise<WebsocketClient>((resolve, reject) => {\n            let endpoint = new WebSocket(url, protocols);\n            endpoint.onopen = event => {\n                this.connected = true;\n                this.endpoint = endpoint;\n                this.eventAggregator.subscribe(WebsocketClient.USERS_EVENT, users => {\n                    this.users = new Set<Object>(users);\n                });\n                this.eventAggregator.publish(WebsocketClient.CONNECTED_EVENT, endpoint);\n                resolve(this);\n            };\n            endpoint.onclose = event => this.connected = false;\n            endpoint.onmessage = event => this.handleMessage(event.data);\n            endpoint.onerror = error => reject(error);\n        });\n    }\n\n    private handleMessage(message: any) {\n        let jsonMessage = this.jsonDecoder.decode(message, Message);\n        this.eventAggregator.publish(jsonMessage.event, jsonMessage.payload);\n    }\n\n    public close(): void {\n        this.endpoint.close();\n        this.eventAggregator.publish(WebsocketClient.DISCONNECTED_EVENT, this);\n    }\n\n    public send(data: any): void {\n        let message = data;\n        if (typeof data === \"object\") {\n            message = new JsonEncoder().encode(data);\n        }\n        switch (this.endpoint.readyState) {\n            case WebSocket.CONNECTING:\n            this.eventAggregator.subscribeOnce(WebsocketClient.CONNECTED_EVENT, endpoint => endpoint.send(message));\n            break;\n            case WebSocket.OPEN:\n            this.endpoint.send(message);\n            break;\n            case WebSocket.CLOSING:\n            case WebSocket.CLOSED:\n            default:\n            // do nothing\n        }\n    }\n\n    public join(channel: string): void {\n        this.send(new JoinMessage(channel));\n    }\n\n    public leave(channel: string): void {\n        this.send(new LeaveMessage(channel));\n    }\n\n}\n"]}